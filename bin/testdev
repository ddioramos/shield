#!/bin/bash

export VAULT_SKIP_VERIFY=1
workdir=$PWD/tmp/work
storedir=$PWD/tmp/store
export PORT=${PORT:-8181}

setup_workdir() {
  rm -rf ${workdir} ${storedir}
  mkdir -p ${workdir}/{etc,var,config}
  mkdir -p ${storedir}
}

preflight() {
  echo "RUNNING testdev PRE-FLIGHT CHECKS"
  echo

  echo "checking for SHIELD binaries..."
  missing=''
  for bin in shieldd shield-agent shield-schema; do
    if [[ ! -f "$bin" ]]; then
      echo " - missing '$bin' binary..."
      missing=1
    fi
  done
  for bin in shield; do
    if [[ ! -f "$bin" ]]; then
      echo " - missing '$bin' binary..."
      missing=1
    fi
  done
  if [[ -n "$missing" ]]; then
    make shield shield-cli
  fi

  echo "checking for SHIELD plugins..."
  missing=''
  for plugin in $(cat plugins); do
    if [[ ! -f "$plugin" ]]; then
      echo " - missing '$plugin' plugin"
      missing=1
    fi
  done
  if [[ -n "$missing" ]] ; then
    make plugins
  fi

  echo "checking for tmux..."
  if ! type tmux &>/dev/null; then
    echo
    echo "SHIELD's testdev environment requires tmux (https://tmux.github.io)"
    echo "You will need to install tmux to continue."
    case $OSTYPE in
    *darwin*) echo
              echo "On macOS ($OSTYPE), you can \`brew install tmux\` and be on your way."
    esac
    exit 1
  fi

  echo "checking for vault..."
  if ! type vault &>/dev/null; then
    echo
    echo "SHIELD's testdev environment requires vault (https://vaultproject.io)"
    echo "You will need to install vault to continue."
    case $OSTYPE in
    *darwin*) echo
              echo "On macOS ($OSTYPE), you can \`brew install vault\` and be on your way."
    esac
    exit 1
  fi
  v=$(vault -v | awk '{print $2}')
  case $v in
  v0.8.*) ;;
  v0.9.*) ;;
  v0.10.*) ;;
  v0.11.*) ;;
  v1.0.*) ;;
  *) echo
     echo "The installed version of vault ($v) has not been verified"
     echo "to work with this version of SHIELD testdev.  Please try v0.9.6"
      case $OSTYPE in
      *darwin*) echo
                echo "On macOS ($OSTYPE), you can \`brew upgrade vault\` and be on your way."
      esac
     exit 1;
     ;;
  esac

  echo
  echo "PRE-FLIGHT CHECKS OK"
}

# set up a dedicated directory just for plugins
mkdir -p ${workdir}/bin
for plugin in $(cat plugins); do
  if [[ -f $plugin && -x $plugin ]]; then
    cp $plugin ${workdir}/bin/$plugin
  fi
done

case "${1}" in
(vault)
  mkdir -p ${workdir}/var/vault
  cat >${workdir}/etc/vault.conf <<EOF
storage "file" {
  path = "${workdir}/var/vault"
}
disable_mlock = true
listener "tcp" {
  address = "127.0.0.1:8200"
  tls_disable = true
}
EOF
  while true; do
    echo ">> Spinning up a local (loopback) Vault"
    vault server -config ${workdir}/etc/vault.conf
    echo

    echo "vault exited."
    echo "Do you want to [r]estart it (sealed)"
    echo "or re-[i]nitialize it?"
    read -p "[r/i/N] " CONTINUE
    case "${CONTINUE}" in
    i*|I*) rm -rf ${workdir}/var/vault ;;
    r*|r*) ;;
    *) exit 0 ;;
    esac
  done
  ;;
(shieldd)
  ssh-keygen -m PEM -t rsa -f ${workdir}/config/shieldd_key -N '' >/dev/null
  rm ${workdir}/config/shieldd_key.pub

  export SHIELD_DEBUG=yes
  export SHIELD_LOG_LEVEL=debug
  export SHIELD_DATA_DIR="${workdir}/var/"
  export SHIELD_WEB_ROOT="${PWD}/web/htdocs"
  export SHIELD_SCHEDULER_FAST_LOOP="5s"
  export SHIELD_SCHEDULER_SLOW_LOOP="40s"
  export SHIELD_API_BIND="127.0.0.1:8180"
  export SHIELD_API_PPROF=":8185"
  export SHIELD_API_ENV="TESTDEV"
  export SHIELD_API_COLOR="yellow"
  export SHIELD_API_MOTD="Welcome to the testdev S.H.I.E.L.D. environment!"
  export SHIELD_API_FAILSAFE_USERNAME="failsafe"
  export SHIELD_API_FAILSAFE_PASSWORD="sekrit"
  export SHIELD_API_SESSION_TIMEOUT="8h"
  export SHIELD_LEGACY_AGENTS_ENABLED=yes
  export SHIELD_LEGACY_AGENTS_DIAL_TIMEOUT="5s"
  export SHIELD_LEGACY_AGENTS_PRIVATE_KEY=$(cat ${workdir}/config/shieldd_key)
  export SHIELD_PLUGIN_PATHS="${workdir}/bin:${PWD}/test/plugins"
  export SHIELD_METADATA_RETENTION_PURGED_ARCHIVES="90s"
  export SHIELD_METADATA_RETENTION_TASK_LOGS="1h"

  export PATH=$(pwd):$(pwd)/bin:${PATH}
  while true; do
    env | grep ^SHIELD_
    echo
    echo ">> Setting up SHIELD schema"
    ./shield-schema -d ${workdir}/var/shield.db
    echo

    echo ">> RUNNING SHIELD CORE"
    trap ":" INT # ignore Ctrl-C
    GODEBUG=schedtrace=1000 ./shieldd 2>&1 | tee ${workdir}/var/shieldd.log
    echo
    echo "shieldd exited."
    echo "Do you want to restart it?"
    read -p "[y/N] " CONTINUE
    case "${CONTINUE}" in
    y*|Y*) ;;
    *) exit 0 ;;
    esac
  done
  ;;

(shieldagent)
  PORT=$2
  echo "waiting for SHIELD Core to spin up on http://127.0.0.1:${PORT}..."
  while ! curl -Ls http://127.0.0.1:${PORT}/v2/info 2>/dev/null | grep -q TESTDEV; do
      sleep 1
  done

  export SHIELD_AGENT_NAME="bond-james-bond"
  export SHIELD_AGENT_LISTEN_ADDRESS="0.0.0.0:5444"
  export SHIELD_AGENT_LOG_LEVEL=debug
  export SHIELD_AGENT_REGISTRATION_URL="http://127.0.0.1:${PORT}"
  export SHIELD_AGENT_REGISTRATION_INTERVAL=15
  export SHIELD_AGENT_AUTHORIZED_KEY=$(curl -H "X-Shield-Session: ${SHIELD_API_TOKEN}" ${SHIELD_AGENT_REGISTRATION_URL}/v1/meta/pubkey)
  export SHIELD_AGENT_PLUGIN_PATHS="${workdir}/bin:${PWD}/test/plugins"

  export PATH=$(pwd):$(pwd)/bin:${PATH}
  while true; do
    env | grep ^SHIELD_
    echo
    echo ">> RUNNING SHIELD AGENT"
    trap ":" INT # ignore Ctrl-C
    ./shield-agent 2>&1 | tee ${workdir}/var/shield-agent.log
    echo
    echo "shield-agent exited."
    echo "Do you want to restart it?"
    read -p "[y/N] " CONTINUE
    case "${CONTINUE}" in
    y*|Y*) ;;
    *) exit 0 ;;
    esac
  done
  ;;
("")
  setup_workdir
  preflight >&2
  tmux new-session \; set-option update-environment ' PORT SHIELD_API' \; \
       new-window -n vault ./bin/testdev vault \; \
       new-window -n daemon ./bin/testdev shieldd \; \
       new-window -n agent ./bin/testdev shieldagent ${PORT} \; \
       new-window -n dev-setup "sleep 5 && ./bin/dev-setup ${PORT} ${NO_INIT:-}; read JUNK" \; \
       new-window -n db sqlite3 ${workdir}/var/shield.db \;
  ;;

(*)
  echo >&2 "USAGE: $0 [ACTION]"
  echo >&2 ""
  echo >&2 "Run components of a test/dev shield setup, on http://127.0.0.1:${PORT}"
  echo >&2 ""
  echo >&2 "Actions:"
  echo >&2 "  shieldd     Run SHIELD core daemon"
esac

# vim:ft=bash
